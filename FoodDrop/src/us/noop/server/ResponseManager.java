package us.noop.server;

import java.util.ArrayList;
import java.util.HashMap;

/**
 * A class to manage the Response Threads generated by the server, mainly closing them and removing excess.
 * Also organizes responses based on pages.
 * 
 * Possibly a bad idea.
 * @author Ulysses
 *
 */
public class ResponseManager {
	
	private ArrayList<Thread> responses = new ArrayList<Thread>();
	
	/**
	 * Adds a Response thread to monitor.
	 * @param t the thread
	 */
	public void register(Thread t){
		responses.add(t);
	}
	
	private HashMap<String, Page> pages = new HashMap<String, Page>();
	
	/**
	 * Returns an appropriate response to the address.
	 * Pages are registered in Server
	 * @param requestData the address passed by the client
	 * @return a page
	 */
	public String getResponse(RequestData requestData){
		int i = 0;
		String currentR = null;
		for(String s : pages.keySet()){
			if(requestData.getAddress().startsWith(s)){
				if(s.split("/").length >= i){
					i = s.split("/").length;
					currentR = s;
				}
			}
		}
		String r = "";
		if(currentR == null) r = "Invalid address.";//TODO add 404/500 page
		else r = pages.get(currentR).getResponse(requestData);
		return r;
	}
	
	public static String generateHeader(int code, String ctext, String content, String MIME){
		return "HTTP/1.1 " + code + " " + ctext + "\r\nContent-Length: " + content.length() + "\r\nConnection: Closed\r\nContent-Type: " + MIME + "\r\n\r\n" + content;
	}
	
	/**
	 * Adds a page that will be a valid request
	 * @param p the page to add (the address should be contained in the class)
	 */
	public void addPage(Page p){
		pages.put(p.getAddress(), p);
	}
	
	private int id = 0;
	
	/**
	 * A utility method to make Responses easier to display in console.
	 * @return the next unused id
	 */
	public int nextId(){
		id++;
		return id - 1;
		
	}
}
